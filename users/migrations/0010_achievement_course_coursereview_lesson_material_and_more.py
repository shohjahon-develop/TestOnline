# Generated by Django 5.1.7 on 2025-04-06 17:42

import datetime
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import users.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('users', '0009_user_agreetoterms'),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='achievement name')),
                ('description', models.TextField(verbose_name='description')),
                ('category', models.CharField(choices=[('general', 'Umumiy'), ('tests', 'Testlar'), ('streak', 'Streak'), ('mock_tests', 'Mock Testlar'), ('courses', 'Kurslar'), ('profile', 'Profil'), ('community', 'Jamiyat')], db_index=True, default='general', max_length=20, verbose_name='category')),
                ('points_reward', models.IntegerField(default=0, verbose_name='points reward')),
                ('icon', models.CharField(blank=True, help_text='Frontend ikonka nomi', max_length=50, null=True, verbose_name='icon name')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
            ],
            options={
                'verbose_name': 'achievement',
                'verbose_name_plural': 'achievements',
                'ordering': ['category', 'points_reward'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='course title')),
                ('description', models.TextField(verbose_name='description')),
                ('price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='price')),
                ('duration_weeks', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='duration (weeks)')),
                ('lessons_count', models.PositiveSmallIntegerField(default=0, verbose_name='lessons count')),
                ('difficulty', models.CharField(choices=[('oson', 'Oson'), ('orta', "O'rta"), ('qiyin', 'Qiyin'), ('murakkab', 'Murakkab')], default='orta', max_length=10, verbose_name='difficulty')),
                ('language', models.CharField(choices=[('en', 'Ingliz tili'), ('tr', 'Turk tili'), ('ar', 'Arab tili'), ('uz', "O'zbek tili"), ('ru', 'Rus tili')], default='uz', max_length=20, verbose_name='language')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='course_thumbnails/', verbose_name='thumbnail')),
                ('requirements', models.TextField(blank=True, null=True, verbose_name='requirements')),
                ('what_you_learn', models.TextField(blank=True, null=True, verbose_name='what you learn')),
                ('has_certificate', models.BooleanField(default=False, verbose_name='certificate provided')),
                ('status', models.CharField(choices=[('active', 'Faol'), ('inactive', 'Nofaol'), ('draft', 'Qoralama')], default='draft', max_length=10, verbose_name='status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated')),
                ('rating', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)], verbose_name='average rating')),
                ('enrolled_students_count', models.PositiveIntegerField(default=0, verbose_name='enrolled students count')),
            ],
            options={
                'verbose_name': 'course',
                'verbose_name_plural': 'courses',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CourseReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='rating')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='comment')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'course review',
                'verbose_name_plural': 'course reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='lesson title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('video_url', models.URLField(blank=True, null=True, verbose_name='video URL')),
                ('video_file', models.FileField(blank=True, null=True, upload_to='lesson_videos/', verbose_name='video file')),
                ('duration_minutes', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='duration (minutes)')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='order')),
                ('is_free_preview', models.BooleanField(default=False, verbose_name='free preview')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
            ],
            options={
                'verbose_name': 'lesson',
                'verbose_name_plural': 'lessons',
                'ordering': ['course', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='material title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('material_type', models.CharField(choices=[('book', 'Kitob'), ('video', 'Video dars'), ('guide', "Qo'llanma"), ('article', 'Maqola'), ('presentation', 'Prezentatsiya'), ('test_collection', "Test to'plami"), ('other', 'Boshqa')], default='book', max_length=20, verbose_name='material type')),
                ('file_format', models.CharField(choices=[('pdf', 'PDF'), ('docx', 'DOCX'), ('pptx', 'PPTX'), ('mp4', 'MP4'), ('mp3', 'MP3'), ('zip', 'ZIP'), ('link', 'Havola'), ('other', 'Boshqa')], default='pdf', max_length=10, verbose_name='file format')),
                ('file', models.FileField(blank=True, help_text="Format 'link' bo'lmasa yuklang", null=True, upload_to='materials/', verbose_name='file')),
                ('link', models.URLField(blank=True, help_text="Format 'link' bo'lsa kiriting", null=True, verbose_name='link')),
                ('size_mb', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='size (MB)')),
                ('downloads_count', models.PositiveIntegerField(default=0, verbose_name='downloads count')),
                ('status', models.CharField(choices=[('active', 'Faol'), ('inactive', 'Nofaol'), ('draft', 'Qoralama')], default='draft', max_length=10, verbose_name='status')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='uploaded at')),
                ('is_free', models.BooleanField(default=True, verbose_name='is free')),
                ('price', models.DecimalField(decimal_places=2, default=0.0, help_text="Agar bepul bo'lmasa narxi", max_digits=10, verbose_name='price')),
            ],
            options={
                'verbose_name': 'material',
                'verbose_name_plural': 'materials',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='MockTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='mock test title')),
                ('mock_type', models.CharField(choices=[('ielts', 'IELTS'), ('toefl', 'TOEFL'), ('cefr', 'CEFR'), ('sat', 'SAT'), ('milliy_sertifikat', 'Milliy Sertifikat'), ('dtm', 'DTM Blok Test'), ('other', 'Boshqa')], default='ielts', max_length=20, verbose_name='mock test type')),
                ('language', models.CharField(blank=True, choices=[('en', 'Ingliz tili'), ('tr', 'Turk tili'), ('ar', 'Arab tili'), ('uz', "O'zbek tili"), ('ru', 'Rus tili')], default='en', max_length=20, null=True, verbose_name='language')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('price', models.DecimalField(decimal_places=2, default=50000.0, max_digits=10, verbose_name='price')),
                ('duration_minutes', models.IntegerField(default=165, verbose_name='total duration (minutes)')),
                ('sections_info', models.JSONField(blank=True, help_text="Bo'limlar haqida ma'lumot (JSON)", null=True, verbose_name='sections info')),
                ('rules', models.TextField(blank=True, null=True, verbose_name='rules')),
                ('status', models.CharField(choices=[('active', 'Faol'), ('inactive', 'Nofaol'), ('draft', 'Qoralama')], default='draft', max_length=10, verbose_name='status')),
                ('available_from', models.DateField(blank=True, null=True, verbose_name='available from')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
            ],
            options={
                'verbose_name': 'mock test',
                'verbose_name_plural': 'mock tests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MockTestMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mock_test_type', models.CharField(choices=[('ielts', 'IELTS'), ('toefl', 'TOEFL'), ('cefr', 'CEFR'), ('sat', 'SAT'), ('milliy_sertifikat', 'Milliy Sertifikat'), ('dtm', 'DTM Blok Test'), ('other', 'Boshqa')], db_index=True, max_length=20, verbose_name='mock test type')),
                ('language', models.CharField(blank=True, choices=[('en', 'Ingliz tili'), ('tr', 'Turk tili'), ('ar', 'Arab tili'), ('uz', "O'zbek tili"), ('ru', 'Rus tili')], db_index=True, max_length=20, null=True, verbose_name='language')),
                ('title', models.CharField(max_length=255, verbose_name='material title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('file', models.FileField(blank=True, null=True, upload_to='mock_test_materials/', verbose_name='file')),
                ('link', models.URLField(blank=True, null=True, verbose_name='link')),
                ('material_format', models.CharField(choices=[('pdf', 'PDF'), ('docx', 'DOCX'), ('pptx', 'PPTX'), ('mp4', 'MP4'), ('mp3', 'MP3'), ('zip', 'ZIP'), ('link', 'Havola'), ('other', 'Boshqa')], default='pdf', max_length=10, verbose_name='format')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='uploaded at')),
                ('is_free', models.BooleanField(default=True, verbose_name='is free')),
            ],
            options={
                'verbose_name': 'mock test material',
                'verbose_name_plural': 'mock test materials',
                'ordering': ['mock_test_type', 'language', '-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='MockTestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_score', models.DecimalField(blank=True, decimal_places=1, max_digits=3, null=True, verbose_name='overall score/band')),
                ('section_scores', models.JSONField(blank=True, null=True, verbose_name='section scores')),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='start time')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='end time')),
                ('status', models.CharField(choices=[('in_progress', 'Jarayonda'), ('completed', 'Tugatilgan'), ('cancelled', 'Bekor qilingan')], default='in_progress', max_length=20, verbose_name='status')),
                ('feedback', models.TextField(blank=True, null=True, verbose_name='feedback/comments')),
            ],
            options={
                'verbose_name': 'mock test result',
                'verbose_name_plural': 'mock test results',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(max_length=255, verbose_name='message')),
                ('notification_type', models.CharField(choices=[('new_test', 'Yangi test'), ('new_course', 'Yangi kurs'), ('new_material', 'Yangi material'), ('test_result', 'Test natijasi'), ('mock_test_result', 'Mock test natijasi'), ('payment_success', "Muvaffaqiyatli to'lov"), ('payment_failed', "Muvaffaqiyatsiz to'lov"), ('achievement_unlocked', 'Yutuqqa erishildi'), ('schedule_reminder', 'Jadval eslatmasi'), ('announcement', "E'lon"), ('system', 'Tizim xabari'), ('course_enrollment', 'Kursga yozilish')], max_length=20, verbose_name='type')),
                ('is_read', models.BooleanField(db_index=True, default=False, verbose_name='is read')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('link', models.CharField(blank=True, help_text="Frontend uchun link (masalan, '/tests/123')", max_length=500, null=True, verbose_name='link')),
                ('related_object_id', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'notification',
                'verbose_name_plural': 'notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text="Chiqimlar uchun manfiy bo'lishi mumkin", max_digits=12, verbose_name='amount')),
                ('payment_type', models.CharField(choices=[('deposit', "Hisobni to'ldirish"), ('test_purchase', 'Test sotib olish'), ('course_purchase', 'Kurs sotib olish'), ('material_purchase', 'Material sotib olish'), ('mock_test_purchase', 'Mock test sotib olish'), ('withdrawal', 'Chiqim'), ('refund', 'Qaytarish'), ('bonus', 'Bonus'), ('referral_bonus', "Do'stni taklif bonusi")], max_length=20, verbose_name='payment type')),
                ('description', models.CharField(blank=True, max_length=255, verbose_name='description')),
                ('status', models.CharField(choices=[('pending', 'Kutilmoqda'), ('successful', 'Muvaffaqiyatli'), ('failed', 'Muvaffaqiyatsiz'), ('cancelled', 'Bekor qilingan')], db_index=True, default='pending', max_length=20, verbose_name='status')),
                ('payment_method', models.CharField(blank=True, choices=[('click', 'Click'), ('payme', 'Payme'), ('uzum', 'Uzum Bank'), ('internal', 'Ichki balans'), ('admin', 'Admin'), ('other', 'Boshqa')], max_length=15, null=True, verbose_name='payment method')),
                ('transaction_id', models.CharField(blank=True, help_text="To'lov tizimi IDsi (agar bo'lsa)", max_length=100, null=True, unique=True, verbose_name='transaction ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'payment',
                'verbose_name_plural': 'payments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField(verbose_name='question text')),
                ('difficulty', models.CharField(choices=[('oson', 'Oson'), ('orta', "O'rta"), ('qiyin', 'Qiyin'), ('murakkab', 'Murakkab')], default='orta', max_length=10, verbose_name='difficulty')),
                ('option_a', models.CharField(max_length=500, verbose_name='option A')),
                ('option_b', models.CharField(max_length=500, verbose_name='option B')),
                ('option_c', models.CharField(max_length=500, verbose_name='option C')),
                ('option_d', models.CharField(max_length=500, verbose_name='option D')),
                ('correct_answer', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D')], max_length=1, verbose_name='correct answer')),
                ('explanation', models.TextField(blank=True, help_text="To'g'ri javob uchun izoh", null=True, verbose_name='explanation')),
                ('points', models.PositiveSmallIntegerField(default=1, help_text='Ushbu savol uchun ball', verbose_name='points')),
                ('order', models.PositiveIntegerField(default=0, help_text='Test ichidagi tartib raqami', verbose_name='order')),
            ],
            options={
                'verbose_name': 'question',
                'verbose_name_plural': 'questions',
                'ordering': ['test', 'order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='ScheduleItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.PositiveSmallIntegerField(choices=[(1, 'Dushanba'), (2, 'Seshanba'), (3, 'Chorshanba'), (4, 'Payshanba'), (5, 'Juma'), (6, 'Shanba'), (7, 'Yakshanba')], verbose_name='day of week')),
                ('start_time', models.TimeField(verbose_name='start time')),
                ('end_time', models.TimeField(verbose_name='end time')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('item_type', models.CharField(choices=[('lesson', 'Dars'), ('test', 'Test'), ('study', "Mustaqil o'qish"), ('event', 'Tadbir'), ('other', 'Boshqa')], default='study', max_length=10, verbose_name='item type')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
            ],
            options={
                'verbose_name': 'schedule item',
                'verbose_name_plural': 'schedule items',
                'ordering': ['user', 'day_of_week', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='subject name')),
                ('icon', models.ImageField(blank=True, null=True, upload_to='subject_icons/', verbose_name='icon')),
            ],
            options={
                'verbose_name': 'subject',
                'verbose_name_plural': 'subjects',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='University',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='university name')),
                ('short_name', models.CharField(blank=True, max_length=20, null=True, verbose_name='short name')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='university_logos/', verbose_name='logo')),
                ('region', models.CharField(choices=[('Toshkent sh.', 'Toshkent sh.'), ('Andijon', 'Andijon'), ('Buxoro', 'Buxoro'), ('Fargʻona', "Farg'ona"), ('Jizzax', 'Jizzax'), ('Xorazm', 'Xorazm'), ('Namangan', 'Namangan'), ('Navoiy', 'Navoiy'), ('Qashqadaryo', 'Qashqadaryo'), ('Qoraqalpogʻiston R.', "Qoraqalpog'iston R."), ('Samarqand', 'Samarqand'), ('Sirdaryo', 'Sirdaryo'), ('Surxondaryo', 'Surxondaryo'), ('Toshkent vil.', 'Toshkent vil.')], db_index=True, max_length=50, verbose_name='region')),
                ('website', models.URLField(blank=True, null=True, verbose_name='website')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('faculties_info', models.JSONField(blank=True, help_text='Fakultetlar va kodlari', null=True, verbose_name='faculties info')),
                ('admission_scores_info', models.JSONField(blank=True, help_text="Kirish ballari (yil bo'yicha)", null=True, verbose_name='admission scores info')),
            ],
            options={
                'verbose_name': 'university',
                'verbose_name_plural': 'universities',
                'ordering': ['region', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(blank=True, null=True, verbose_name='earned at')),
                ('progress', models.IntegerField(default=0, verbose_name='progress')),
                ('target', models.IntegerField(default=1, verbose_name='target')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_by', to='users.achievement', verbose_name='achievement')),
            ],
            options={
                'verbose_name': 'user achievement',
                'verbose_name_plural': 'user achievements',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selected_answer', models.CharField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D')], max_length=1, null=True, verbose_name='selected answer')),
                ('is_correct', models.BooleanField(default=False, verbose_name='is correct')),
            ],
            options={
                'verbose_name': 'user answer',
                'verbose_name_plural': 'user answers',
            },
        ),
        migrations.CreateModel(
            name='UserCourseEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrolled_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('progress', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)], verbose_name='progress percentage')),
            ],
            options={
                'verbose_name': 'course enrollment',
                'verbose_name_plural': 'course enrollments',
                'ordering': ['-enrolled_at'],
            },
        ),
        migrations.CreateModel(
            name='UserRating',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='rating', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('total_score', models.IntegerField(db_index=True, default=0, verbose_name='total score')),
                ('rank', models.PositiveIntegerField(db_index=True, default=0, verbose_name='rank')),
                ('math_score', models.IntegerField(default=0, verbose_name='mathematics score')),
                ('physics_score', models.IntegerField(default=0, verbose_name='physics score')),
                ('english_score', models.IntegerField(default=0, verbose_name='english score')),
                ('level', models.PositiveIntegerField(default=1, verbose_name='level')),
                ('points_to_next_level', models.IntegerField(default=100, verbose_name='points for next level')),
                ('current_level_points', models.IntegerField(default=0, verbose_name='points in current level')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='last updated')),
            ],
            options={
                'verbose_name': 'user rating',
                'verbose_name_plural': 'user ratings',
                'ordering': ['rank', '-total_score'],
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='settings', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('language', models.CharField(choices=[('uz', "O'zbek"), ('ru', 'Русский'), ('en', 'English')], default='uz', max_length=2)),
                ('theme', models.CharField(choices=[('light', "Yorug'"), ('dark', 'Tungi')], default='light', max_length=5)),
                ('autoplay_videos', models.BooleanField(default=True)),
                ('sound_effects', models.BooleanField(default=False)),
                ('high_contrast', models.BooleanField(default=False)),
                ('notify_email', models.BooleanField(default=True)),
                ('notify_sms', models.BooleanField(default=False)),
                ('notify_push', models.BooleanField(default=True)),
                ('notify_test_updates', models.BooleanField(default=True)),
                ('notify_course_updates', models.BooleanField(default=True)),
                ('notify_payments', models.BooleanField(default=True)),
                ('notify_reminders', models.BooleanField(default=True)),
                ('two_factor_enabled', models.BooleanField(default=False)),
                ('weekly_reports', models.BooleanField(default=True)),
                ('personalized_recommendations', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'user settings',
                'verbose_name_plural': 'user settings',
            },
        ),
        migrations.CreateModel(
            name='UserTestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=0, verbose_name='score')),
                ('total_questions', models.IntegerField(default=0, verbose_name='total questions')),
                ('percentage', models.FloatField(default=0.0, verbose_name='percentage')),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='start time')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='end time')),
                ('time_spent', models.DurationField(blank=True, null=True, verbose_name='time spent')),
                ('status', models.CharField(choices=[('in_progress', 'Jarayonda'), ('completed', 'Tugatilgan'), ('cancelled', 'Bekor qilingan')], default='in_progress', max_length=20, verbose_name='status')),
            ],
            options={
                'verbose_name': 'user test result',
                'verbose_name_plural': 'user test results',
                'ordering': ['-start_time'],
            },
        ),
        migrations.RemoveField(
            model_name='foydalanuvchiyutugi',
            name='foydalanuvchi',
        ),
        migrations.RemoveField(
            model_name='foydalanuvchiyutugi',
            name='yutuq',
        ),
        migrations.RemoveField(
            model_name='ieltsmaterial',
            name='ielts_umumiy',
        ),
        migrations.RemoveField(
            model_name='ieltstest',
            name='ielts_umumiy',
        ),
        migrations.RemoveField(
            model_name='ieltsumumiy',
            name='foydalanuvchi',
        ),
        migrations.RemoveField(
            model_name='jadval',
            name='oquvchi',
        ),
        migrations.RemoveField(
            model_name='kurs',
            name='oquvchi',
        ),
        migrations.DeleteModel(
            name='OquvMaterial',
        ),
        migrations.RemoveField(
            model_name='reyting',
            name='foydalanuvchi',
        ),
        migrations.RemoveField(
            model_name='savol',
            name='test',
        ),
        migrations.RemoveField(
            model_name='tolov',
            name='foydalanuvchi',
        ),
        migrations.DeleteModel(
            name='Universitet',
        ),
        migrations.AlterModelOptions(
            name='test',
            options={'ordering': ['-created_at'], 'verbose_name': 'test', 'verbose_name_plural': 'tests'},
        ),
        migrations.AlterModelOptions(
            name='user',
            options={'ordering': ['-date_joined'], 'verbose_name': 'user', 'verbose_name_plural': 'users'},
        ),
        migrations.RemoveField(
            model_name='test',
            name='fan',
        ),
        migrations.RemoveField(
            model_name='test',
            name='is_mock',
        ),
        migrations.RemoveField(
            model_name='test',
            name='mukofot',
        ),
        migrations.RemoveField(
            model_name='test',
            name='narx',
        ),
        migrations.RemoveField(
            model_name='test',
            name='qiyinlik',
        ),
        migrations.RemoveField(
            model_name='test',
            name='qoshilgan_sana',
        ),
        migrations.RemoveField(
            model_name='test',
            name='savol_soni',
        ),
        migrations.RemoveField(
            model_name='test',
            name='tavsif',
        ),
        migrations.RemoveField(
            model_name='test',
            name='user',
        ),
        migrations.RemoveField(
            model_name='test',
            name='vaqt_chegarasi',
        ),
        migrations.AddField(
            model_name='test',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=datetime.datetime(2025, 4, 6, 17, 41, 38, 803153, tzinfo=datetime.timezone.utc), verbose_name='created at'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='test',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_tests', to=settings.AUTH_USER_MODEL, verbose_name='created by'),
        ),
        migrations.AddField(
            model_name='test',
            name='description',
            field=models.TextField(blank=True, null=True, verbose_name='description'),
        ),
        migrations.AddField(
            model_name='test',
            name='difficulty',
            field=models.CharField(choices=[('oson', 'Oson'), ('orta', "O'rta"), ('qiyin', 'Qiyin'), ('murakkab', 'Murakkab')], default='orta', max_length=10, verbose_name='difficulty'),
        ),
        migrations.AddField(
            model_name='test',
            name='price',
            field=models.DecimalField(decimal_places=2, default=0.0, help_text="Premium testlar uchun narx (so'mda)", max_digits=10, verbose_name='price'),
        ),
        migrations.AddField(
            model_name='test',
            name='question_count',
            field=models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='number of questions'),
        ),
        migrations.AddField(
            model_name='test',
            name='reward_points',
            field=models.IntegerField(default=0, help_text='Testni muvaffaqiyatli topshirganlik uchun beriladigan ball', verbose_name='reward points'),
        ),
        migrations.AddField(
            model_name='test',
            name='test_type',
            field=models.CharField(choices=[('free', 'Bepul'), ('premium', 'Premium')], default='free', max_length=10, verbose_name='test type'),
        ),
        migrations.AddField(
            model_name='test',
            name='time_limit',
            field=models.IntegerField(default=60, validators=[django.core.validators.MinValueValidator(1)], verbose_name='time limit (minutes)'),
        ),
        migrations.AddField(
            model_name='test',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, verbose_name='updated at'),
        ),
        migrations.AddField(
            model_name='user',
            name='about_me',
            field=models.TextField(blank=True, null=True, verbose_name='about me'),
        ),
        migrations.AddField(
            model_name='user',
            name='balance',
            field=models.DecimalField(decimal_places=2, default=0.0, max_digits=12, verbose_name='balance'),
        ),
        migrations.AddField(
            model_name='user',
            name='is_blocked',
            field=models.BooleanField(default=False, verbose_name='blocked'),
        ),
        migrations.AddField(
            model_name='user',
            name='profile_picture',
            field=models.ImageField(blank=True, null=True, upload_to=users.models.user_profile_picture_path, verbose_name='profile picture'),
        ),
        migrations.AddField(
            model_name='user',
            name='target_faculty',
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name='target faculty'),
        ),
        migrations.AddField(
            model_name='user',
            name='target_university',
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name='target university'),
        ),
        migrations.AlterField(
            model_name='test',
            name='status',
            field=models.CharField(choices=[('active', 'Faol'), ('inactive', 'Nofaol'), ('draft', 'Qoralama')], default='draft', max_length=10, verbose_name='status'),
        ),
        migrations.AlterField(
            model_name='test',
            name='title',
            field=models.CharField(max_length=255, verbose_name='test title'),
        ),
        migrations.AlterField(
            model_name='user',
            name='address',
            field=models.TextField(blank=True, null=True, verbose_name='address'),
        ),
        migrations.AlterField(
            model_name='user',
            name='agreetoterms',
            field=models.BooleanField(default=False, verbose_name='agreed to terms'),
        ),
        migrations.AlterField(
            model_name='user',
            name='birth_date',
            field=models.DateField(blank=True, null=True, verbose_name='birth date'),
        ),
        migrations.AlterField(
            model_name='user',
            name='date_joined',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined'),
        ),
        migrations.AlterField(
            model_name='user',
            name='email',
            field=models.EmailField(max_length=254, unique=True, verbose_name='email address'),
        ),
        migrations.AlterField(
            model_name='user',
            name='full_name',
            field=models.CharField(max_length=255, verbose_name='full name'),
        ),
        migrations.AlterField(
            model_name='user',
            name='gender',
            field=models.CharField(blank=True, choices=[('male', 'Erkak'), ('female', 'Ayol')], max_length=10, null=True, verbose_name='gender'),
        ),
        migrations.AlterField(
            model_name='user',
            name='grade',
            field=models.CharField(blank=True, max_length=50, null=True, verbose_name='grade/class'),
        ),
        migrations.AlterField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='custom_user_groups', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AlterField(
            model_name='user',
            name='is_active',
            field=models.BooleanField(default=True, verbose_name='active'),
        ),
        migrations.AlterField(
            model_name='user',
            name='is_staff',
            field=models.BooleanField(default=False, verbose_name='staff status'),
        ),
        migrations.AlterField(
            model_name='user',
            name='phone_number',
            field=models.CharField(max_length=20, unique=True, verbose_name='phone number'),
        ),
        migrations.AlterField(
            model_name='user',
            name='region',
            field=models.CharField(blank=True, max_length=100, null=True, verbose_name='region'),
        ),
        migrations.AlterField(
            model_name='user',
            name='role',
            field=models.CharField(choices=[('student', 'Student'), ('admin', 'Admin')], default='student', max_length=10, verbose_name='role'),
        ),
        migrations.AlterField(
            model_name='user',
            name='study_place',
            field=models.CharField(blank=True, max_length=255, null=True, verbose_name='study place'),
        ),
        migrations.AlterField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_permissions', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='course',
            name='teacher',
            field=models.ForeignKey(blank=True, limit_choices_to={'role__in': ['admin', 'teacher']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='taught_courses', to=settings.AUTH_USER_MODEL, verbose_name='teacher'),
        ),
        migrations.AddField(
            model_name='coursereview',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='users.course'),
        ),
        migrations.AddField(
            model_name='coursereview',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_reviews', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='lesson',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='users.course'),
        ),
        migrations.AddField(
            model_name='material',
            name='uploaded_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_materials', to=settings.AUTH_USER_MODEL, verbose_name='uploaded by'),
        ),
        migrations.AddField(
            model_name='mocktest',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_mock_tests', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='mocktestresult',
            name='mock_test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='users.mocktest'),
        ),
        migrations.AddField(
            model_name='mocktestresult',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mock_test_results', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='notification',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='payment',
            name='course',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.course'),
        ),
        migrations.AddField(
            model_name='payment',
            name='material',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.material'),
        ),
        migrations.AddField(
            model_name='payment',
            name='mock_test',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.mocktest'),
        ),
        migrations.AddField(
            model_name='payment',
            name='test',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.test'),
        ),
        migrations.AddField(
            model_name='payment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to=settings.AUTH_USER_MODEL, verbose_name='user'),
        ),
        migrations.AddField(
            model_name='question',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='users.test', verbose_name='test'),
        ),
        migrations.AddField(
            model_name='scheduleitem',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule_items', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='material',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='materials', to='users.subject', verbose_name='subject'),
        ),
        migrations.AddField(
            model_name='course',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='users.subject', verbose_name='subject'),
        ),
        migrations.AddField(
            model_name='test',
            name='subject',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='tests', to='users.subject', verbose_name='subject'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='userachievement',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL, verbose_name='user'),
        ),
        migrations.AddField(
            model_name='useranswer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_answers', to='users.question'),
        ),
        migrations.AddField(
            model_name='usercourseenrollment',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='users.course'),
        ),
        migrations.AddField(
            model_name='usercourseenrollment',
            name='last_accessed_lesson',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='users.lesson'),
        ),
        migrations.AddField(
            model_name='usercourseenrollment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='usertestresult',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='users.test', verbose_name='test'),
        ),
        migrations.AddField(
            model_name='usertestresult',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_results', to=settings.AUTH_USER_MODEL, verbose_name='user'),
        ),
        migrations.AddField(
            model_name='useranswer',
            name='result',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_answers', to='users.usertestresult'),
        ),
        migrations.DeleteModel(
            name='FoydalanuvchiYutugi',
        ),
        migrations.DeleteModel(
            name='Yutuq',
        ),
        migrations.DeleteModel(
            name='IELTSMaterial',
        ),
        migrations.DeleteModel(
            name='IELTSTest',
        ),
        migrations.DeleteModel(
            name='IELTSUmumiy',
        ),
        migrations.DeleteModel(
            name='Jadval',
        ),
        migrations.DeleteModel(
            name='Kurs',
        ),
        migrations.DeleteModel(
            name='Reyting',
        ),
        migrations.DeleteModel(
            name='Savol',
        ),
        migrations.DeleteModel(
            name='Tolov',
        ),
        migrations.AlterUniqueTogether(
            name='coursereview',
            unique_together={('user', 'course')},
        ),
        migrations.AlterUniqueTogether(
            name='userachievement',
            unique_together={('user', 'achievement')},
        ),
        migrations.AlterUniqueTogether(
            name='usercourseenrollment',
            unique_together={('user', 'course')},
        ),
        migrations.AlterUniqueTogether(
            name='useranswer',
            unique_together={('result', 'question')},
        ),
    ]
